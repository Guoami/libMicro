#!/bin/bash

#
# Copyright 2012 Red Hat, Inc.
#
# The contents of this file are subject to the terms
# of the Common Development and Distribution License
# (the "License").  You may not use this file except
# in compliance with the License.
#
# See the License for the specific language governing
# permissions and limitations under the License.
#

# Automatically run the libMicro benchmark in three different ways:
#   1. Without pinning it to NUMA Node 1
#   2. With pinning it to NUMA Node 1
#   3. With pinning it to NUMA Node 1 && using SCHED_FIFO Priority 1
#
# It automatically appends a "run" number to the results and timings files
# so that you can run it multiple times without worry of overwriting previous
# results.
#
# Note that you should use multiview to construct the HTML reports separately.

OSVER=`uname -r`
ROOT_UID=0   # Only users with $UID 0 have root privileges.
HN=`hostname -s`
DN=`dirname $0`

if [ ! -x "$DN/bin/tattle" ]; then
    echo "Could not find runnable tattle: $DN/bin/tattle"
    exit 1
fi

VER=`$DN/bin/tattle -V`

results="$DN/../results"
if [ ! -d "$results" ]; then
    echo "Could not find results dir: $results"
    exit 1
fi

if [ ! -x "$DN/bench" ]; then
    echo "Could not find runnable bench: $DN/bench"
    exit 1
fi

if [ ! -x "$DN/multiview" ]; then
    echo "Could not find runnable multiview: $DN/multiview"
    exit 1
fi

if [ -z "$1" ]; then
	suite="full"
else
	suite=$1
fi

#
# We choose the last CPU listed from lscpu -p since:
#  * It won't be CPU 0 on a single socket, multi-core system
#  * It won't be a CPU on Node 0 in a multi-socket, multi-core system
#    "nodeid" is only used if "nodes" is not 1
coreid=$(lscpu -p | tail -1 | awk '{ split($0, array, ","); print array[1]; }')
nodeid=$(lscpu -p | tail -1 | awk '{ split($0, array, ","); print array[4]; }')

template_base="$results/$OSVER-$HN-$suite"
template_nonuma="$template_base-nonuma-lm.$VER"
template_numa="$template_base-numa.N$nodeid.m$nodeid-lm.$VER"
template_core="$template_base-core.C$coreid.m$nodeid-lm.$VER"
template_core_chrt="$template_base-core.C$coreid.m$nodeid-chrt.f1-lm.$VER"

function checkit {
    if [ -e "$1" ]; then
        return 1;
    else
        return 0;
    fi
}

function checkem {
    checkit $template_nonuma-run.$1-results.txt      || return 1;
    checkit $template_nonuma-run.$1-timings.txt      || return 1;
    checkit $template_numa-run.$1-results.txt        || return 1;
    checkit $template_numa-run.$1-timings.txt        || return 1;
    checkit $template_core-run.$1-results.txt        || return 1;
    checkit $template_core-run.$1-timings.txt        || return 1;
    checkit $template_core_chrt-run.$1-results.txt   || return 1;
    checkit $template_core_chrt-run.$1-timings.txt   || return 1;
    return 0;
}

for (( i = 0; ; i++ )); do
    printf -v idx "%04d" $i
    checkem $idx && break;
done
run="run.$idx"

nodes=$(numactl --hardware | grep available | awk '{print $2}')

echo "Running:        $DN/bench -s $suite"
echo "!Runit-command: $DN/bench -s $suite" > $template_nonuma-$run-results.txt
                      $DN/bench -s $suite >> $template_nonuma-$run-results.txt 2> $template_nonuma-$run-timings.txt
if [ "$nodes" == "1" ]; then
    echo "Running:        numactl -C $coreid $DN/bench -s $suite"
    echo "!Runit-command: numactl -C $coreid $DN/bench -s $suite" > $template_core-$run-results.txt
                          numactl -C $coreid $DN/bench -s $suite >> $template_core-$run-results.txt 2> $template_core-$run-timings.txt
    if [ "$UID" -eq "$ROOT_UID" ]; then
        echo "Running:        numactl -C $coreid chrt -f 1 $DN/bench -s $suite"
        echo "!Runit-command: numactl -C $coreid chrt -f 1 $DN/bench -s $suite" > $template_core_chrt-$run-results.txt
                              numactl -C $coreid chrt -f 1 $DN/bench -s $suite >> $template_core_chrt-$run-results.txt 2> $template_core_chrt-$run-timings.txt
	    $DN/multiview $template_nonuma-$run-results.txt $template_core-$run-results.txt $template_core_chrt-$run-results.txt > $template_base-lm.$VER-$run-results.html
    else
	    $DN/multiview $template_nonuma-$run-results.txt $template_core-$run-results.txt                                      > $template_base-lm.$VER-$run-results.html
    fi
else
    echo "Running:        numactl -N $nodeid -m $nodeid $DN/bench -s $suite"
    echo "!Runit-command: numactl -N $nodeid -m $nodeid $DN/bench -s $suite" > $template_numa-$run-results.txt
                          numactl -N $nodeid -m $nodeid $DN/bench -s $suite >> $template_numa-$run-results.txt 2> $template_numa-$run-timings.txt
    echo "Running:        numactl -C $coreid -m $nodeid $DN/bench -s $suite"
    echo "!Runit-command: numactl -C $coreid -m $nodeid $DN/bench -s $suite" > $template_core-$run-results.txt
                          numactl -C $coreid -m $nodeid $DN/bench -s $suite >> $template_core-$run-results.txt 2> $template_core-$run-timings.txt
    if [ "$UID" -eq "$ROOT_UID" ]; then
        echo "Running:        numactl -C $coreid -m $nodeid chrt -f 1 $DN/bench -s $suite"
        echo "!Runit-command: numactl -C $coreid -m $nodeid chrt -f 1 $DN/bench -s $suite" > $template_core_chrt-$run-results.txt
                              numactl -C $coreid -m $nodeid chrt -f 1 $DN/bench -s $suite >> $template_core_chrt-$run-results.txt 2> $template_core_chrt-$run-timings.txt
        $DN/multiview $template_nonuma-$run-results.txt $template_numa-$run-results.txt $template_core-$run-results.txt $template_core_chrt-$run-results.txt > $template_base-lm.$VER-$run-results.html
    else
        $DN/multiview $template_nonuma-$run-results.txt $template_numa-$run-results.txt $template_core-$run-results.txt                                      > $template_base-lm.$VER-$run-results.html
    fi
fi
